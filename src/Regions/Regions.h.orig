#pragma once
#include <CSingleton.h>
#include <BWTA.h>
#include <BWAPI.h>
#include <BaseManager.h>
#include <TimeManager.h>
#include <map>
#include <set>
#include <list>
#include <vector>

using std::map;
using std::set;
using std::vector;
using std::list;
using namespace BWTA;
using namespace BWAPI;

class UnitData
{
public:
    Unit* unit;
    UnitType unitType;
    Position position;
    int lastSeen;
    UnitData(Unit* unit);
    bool operator == (const UnitData& ud) const;
};

class RegionData
{
public:
    // TODO perhaps change vectors by sets (we need a quick find and don't care about the order)
	map<Player*, vector<UnitData> > buildings;	// list of enemy building seen in this region for each player.
	map<Player*, vector<UnitData> > units;      // list of enemy units seen in this region for each player.
    int lastSeen; // Last seen frame.

	RegionData();
	bool isOccupied() const;
	bool contain(Unit* unit) const;
    inline void add(Unit* unit);
};

class Regions : public CSingleton<Regions> 
{
	friend class CSingleton<Regions>;

private:
	Regions();
	~Regions();
    inline Region* findRegion(BWAPI::Position p);

public:
	void addBuilding(Unit* unit); // add a building in regionData. refresh it if ever inserted.
    void addUnit(Unit* unit); // Add to the corresponding map (building/unit) in regionData. Refresh it if already present.
	void removeBuildings();
    void removeUnits();
	virtual void update();
	virtual std::string getName() const;
	void onUnitShow(Unit* unit);
	void onUnitHide(Unit* unit);
	void display() const;

	map<Region*, RegionData> regionsData;
	TimeManager* timeManager;
};
